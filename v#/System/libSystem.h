/* libSystem.h generated by valac 0.26.1, the Vala compiler, do not modify */


#ifndef __LIBSYSTEM_H__
#define __LIBSYSTEM_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>

G_BEGIN_DECLS


#define SYSTEM_CODE_DOM_TYPE_CODE_REGION_MODE (system_code_dom_code_region_mode_get_type ())

#define SYSTEM_CODE_DOM_TYPE_FIELD_DIRECTION (system_code_dom_field_direction_get_type ())

#define SYSTEM_CODE_DOM_TYPE_CODE_TYPE_REFERENCE_OPTIONS (system_code_dom_code_type_reference_options_get_type ())

#define SYSTEM_CODE_DOM_TYPE_CODE_BINARY_OPERATOR_TYPE (system_code_dom_code_binary_operator_type_get_type ())

#define SYSTEM_CODE_DOM_TYPE_MEMBER_ATTRIBUTES (system_code_dom_member_attributes_get_type ())

#define SYSTEM_IO_PORTS_TYPE_HANDSHAKE (system_io_ports_handshake_get_type ())

#define SYSTEM_IO_PORTS_TYPE_STOP_BITS (system_io_ports_stop_bits_get_type ())

#define SYSTEM_IO_PORTS_TYPE_PARITY (system_io_ports_parity_get_type ())

#define SYSTEM_IO_PORTS_TYPE_SERIAL_DATA (system_io_ports_serial_data_get_type ())

#define SYSTEM_TYPE_IURI_DATA (system_iuri_data_get_type ())
#define SYSTEM_IURI_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SYSTEM_TYPE_IURI_DATA, SystemIUriData))
#define SYSTEM_IS_IURI_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SYSTEM_TYPE_IURI_DATA))
#define SYSTEM_IURI_DATA_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), SYSTEM_TYPE_IURI_DATA, SystemIUriDataIface))

typedef struct _SystemIUriData SystemIUriData;
typedef struct _SystemIUriDataIface SystemIUriDataIface;

#define SYSTEM_TYPE_URI_IDN_SCOPE (system_uri_idn_scope_get_type ())

#define SYSTEM_TYPE_URI_KIND (system_uri_kind_get_type ())

#define SYSTEM_TYPE_URI_PARTIAL (system_uri_partial_get_type ())

#define SYSTEM_TYPE_URI_HOST_NAME_TYPE (system_uri_host_name_type_get_type ())

#define SYSTEM_TYPE_URI_FORMAT (system_uri_format_get_type ())

#define SYSTEM_TYPE_GENERIC_URI_PARSER_OPTIONS (system_generic_uri_parser_options_get_type ())

#define SYSTEM_NET_TYPE_SECURITY_PROTOCOL_TYPE (system_net_security_protocol_type_get_type ())

#define SYSTEM_NET_TYPE_DECOMPRESSION_METHODS (system_net_decompression_methods_get_type ())

#define SYSTEM_NET_MIME_TYPE_DISPOSITION_TYPE_NAMES (system_net_mime_disposition_type_names_get_type ())
#define SYSTEM_NET_MIME_DISPOSITION_TYPE_NAMES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SYSTEM_NET_MIME_TYPE_DISPOSITION_TYPE_NAMES, SystemNetMimeDispositionTypeNames))
#define SYSTEM_NET_MIME_DISPOSITION_TYPE_NAMES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SYSTEM_NET_MIME_TYPE_DISPOSITION_TYPE_NAMES, SystemNetMimeDispositionTypeNamesClass))
#define SYSTEM_NET_MIME_IS_DISPOSITION_TYPE_NAMES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SYSTEM_NET_MIME_TYPE_DISPOSITION_TYPE_NAMES))
#define SYSTEM_NET_MIME_IS_DISPOSITION_TYPE_NAMES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SYSTEM_NET_MIME_TYPE_DISPOSITION_TYPE_NAMES))
#define SYSTEM_NET_MIME_DISPOSITION_TYPE_NAMES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SYSTEM_NET_MIME_TYPE_DISPOSITION_TYPE_NAMES, SystemNetMimeDispositionTypeNamesClass))

typedef struct _SystemNetMimeDispositionTypeNames SystemNetMimeDispositionTypeNames;
typedef struct _SystemNetMimeDispositionTypeNamesClass SystemNetMimeDispositionTypeNamesClass;
typedef struct _SystemNetMimeDispositionTypeNamesPrivate SystemNetMimeDispositionTypeNamesPrivate;

#define SYSTEM_NET_MIME_TYPE_MEDIA_TYPE_NAMES (system_net_mime_media_type_names_get_type ())

#define SYSTEM_NET_MIME_TYPE_APPLICATION (system_net_mime_application_get_type ())
typedef struct _SystemNetMimeApplication SystemNetMimeApplication;

#define SYSTEM_NET_MIME_TYPE_IMAGE (system_net_mime_image_get_type ())
typedef struct _SystemNetMimeImage SystemNetMimeImage;

#define SYSTEM_NET_MIME_TYPE_TEXT (system_net_mime_text_get_type ())
typedef struct _SystemNetMimeText SystemNetMimeText;
typedef struct _SystemNetMimeMediaTypeNames SystemNetMimeMediaTypeNames;

#define SYSTEM_NET_MIME_TYPE_TRANSFER_ENCODING (system_net_mime_transfer_encoding_get_type ())

#define SYSTEM_NET_MAIL_TYPE_DELIVERY_NOTIFICATION_OPTIONS (system_net_mail_delivery_notification_options_get_type ())

#define SYSTEM_NET_MAIL_TYPE_MAIL_ADDRESS (system_net_mail_mail_address_get_type ())
#define SYSTEM_NET_MAIL_MAIL_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SYSTEM_NET_MAIL_TYPE_MAIL_ADDRESS, SystemNetMailMailAddress))
#define SYSTEM_NET_MAIL_MAIL_ADDRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SYSTEM_NET_MAIL_TYPE_MAIL_ADDRESS, SystemNetMailMailAddressClass))
#define SYSTEM_NET_MAIL_IS_MAIL_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SYSTEM_NET_MAIL_TYPE_MAIL_ADDRESS))
#define SYSTEM_NET_MAIL_IS_MAIL_ADDRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SYSTEM_NET_MAIL_TYPE_MAIL_ADDRESS))
#define SYSTEM_NET_MAIL_MAIL_ADDRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SYSTEM_NET_MAIL_TYPE_MAIL_ADDRESS, SystemNetMailMailAddressClass))

typedef struct _SystemNetMailMailAddress SystemNetMailMailAddress;
typedef struct _SystemNetMailMailAddressClass SystemNetMailMailAddressClass;
typedef struct _SystemNetMailMailAddressPrivate SystemNetMailMailAddressPrivate;

#define SYSTEM_NET_MAIL_TYPE_MAIL_PRIORITY (system_net_mail_mail_priority_get_type ())

#define SYSTEM_NET_MAIL_TYPE_SMTP_DELIVERY_METHOD (system_net_mail_smtp_delivery_method_get_type ())

#define SYSTEM_NET_MAIL_TYPE_MAIL_ADDRESS_COLLECTION (system_net_mail_mail_address_collection_get_type ())
#define SYSTEM_NET_MAIL_MAIL_ADDRESS_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SYSTEM_NET_MAIL_TYPE_MAIL_ADDRESS_COLLECTION, SystemNetMailMailAddressCollection))
#define SYSTEM_NET_MAIL_MAIL_ADDRESS_COLLECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SYSTEM_NET_MAIL_TYPE_MAIL_ADDRESS_COLLECTION, SystemNetMailMailAddressCollectionClass))
#define SYSTEM_NET_MAIL_IS_MAIL_ADDRESS_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SYSTEM_NET_MAIL_TYPE_MAIL_ADDRESS_COLLECTION))
#define SYSTEM_NET_MAIL_IS_MAIL_ADDRESS_COLLECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SYSTEM_NET_MAIL_TYPE_MAIL_ADDRESS_COLLECTION))
#define SYSTEM_NET_MAIL_MAIL_ADDRESS_COLLECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SYSTEM_NET_MAIL_TYPE_MAIL_ADDRESS_COLLECTION, SystemNetMailMailAddressCollectionClass))

typedef struct _SystemNetMailMailAddressCollection SystemNetMailMailAddressCollection;
typedef struct _SystemNetMailMailAddressCollectionClass SystemNetMailMailAddressCollectionClass;
typedef struct _SystemNetMailMailAddressCollectionPrivate SystemNetMailMailAddressCollectionPrivate;

#define SYSTEM_NET_MAIL_TYPE_SMTP_STATUS_CODE (system_net_mail_smtp_status_code_get_type ())

#define SYSTEM_NET_MAIL_TYPE_SMTP_ACCESS (system_net_mail_smtp_access_get_type ())

typedef enum  {
	SYSTEM_CODE_DOM_CODE_REGION_MODE_None = 0,
	SYSTEM_CODE_DOM_CODE_REGION_MODE_Start = 1,
	SYSTEM_CODE_DOM_CODE_REGION_MODE_End = 1 << 1
} SystemCodeDomCodeRegionMode;

typedef enum  {
	SYSTEM_CODE_DOM_FIELD_DIRECTION_In,
	SYSTEM_CODE_DOM_FIELD_DIRECTION_Out,
	SYSTEM_CODE_DOM_FIELD_DIRECTION_Ref
} SystemCodeDomFieldDirection;

typedef enum  {
	SYSTEM_CODE_DOM_CODE_TYPE_REFERENCE_OPTIONS_GlobalReference = 1,
	SYSTEM_CODE_DOM_CODE_TYPE_REFERENCE_OPTIONS_GenericTypeParameter = 1 << 1
} SystemCodeDomCodeTypeReferenceOptions;

typedef enum  {
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_Add = 0,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_Subtract = 1,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_Multiply = 2,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_Divide = 3,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_Modulus = 4,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_Assign = 5,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_IdentityInequality = 6,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_IdentityEquality = 7,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_ValueEquality = 8,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_BitwiseOr = 9,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_BitwiseAnd = 10,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_BooleanOr = 11,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_BooleanAnd = 12,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_LessThan = 13,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_LessThanOrEqual = 14,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_GreaterThan = 15,
	SYSTEM_CODE_DOM_CODE_BINARY_OPERATOR_TYPE_GreaterThanOrEqual = 16
} SystemCodeDomCodeBinaryOperatorType;

typedef enum  {
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_Abstract = 0x00000001,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_Final = 0x00000002,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_Static = 0x00000003,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_Override = 0x00000004,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_Const = 0x00000005,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_ScopeMask = 0x0000000F,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_New = 0x00000010,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_VTableMask = 0x000000F0,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_Overloaded = 0x00000100,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_Assembly = 0x00001000,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_FamilyAndAssembly = 0x00002000,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_Family = 0x00003000,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_FamilyOrAssembly = 0x00004000,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_Private = 0x00005000,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_Public = 0x00006000,
	SYSTEM_CODE_DOM_MEMBER_ATTRIBUTES_AccessMask = 0x0000F000
} SystemCodeDomMemberAttributes;

typedef enum  {
	SYSTEM_IO_PORTS_HANDSHAKE_None,
	SYSTEM_IO_PORTS_HANDSHAKE_XOnXOff,
	SYSTEM_IO_PORTS_HANDSHAKE_RequestToSend,
	SYSTEM_IO_PORTS_HANDSHAKE_RequestToSendXOnXOff
} SystemIOPortsHandshake;

typedef enum  {
	SYSTEM_IO_PORTS_STOP_BITS_None,
	SYSTEM_IO_PORTS_STOP_BITS_One,
	SYSTEM_IO_PORTS_STOP_BITS_Two,
	SYSTEM_IO_PORTS_STOP_BITS_OnePointFive
} SystemIOPortsStopBits;

typedef enum  {
	SYSTEM_IO_PORTS_PARITY_None,
	SYSTEM_IO_PORTS_PARITY_Odd,
	SYSTEM_IO_PORTS_PARITY_Even,
	SYSTEM_IO_PORTS_PARITY_Mark,
	SYSTEM_IO_PORTS_PARITY_Space
} SystemIOPortsParity;

typedef enum  {
	SYSTEM_IO_PORTS_SERIAL_DATA_Chars = 1,
	SYSTEM_IO_PORTS_SERIAL_DATA_Eof
} SystemIOPortsSerialData;

struct _SystemIUriDataIface {
	GTypeInterface parent_iface;
	const gchar* (*get_AbsolutePath) (SystemIUriData* self);
	const gchar* (*get_AbsoluteUri) (SystemIUriData* self);
	const gchar* (*get_AbsoluteUri_SafeUnescaped) (SystemIUriData* self);
	const gchar* (*get_Authority) (SystemIUriData* self);
	const gchar* (*get_Fragment) (SystemIUriData* self);
	const gchar* (*get_Host) (SystemIUriData* self);
	const gchar* (*get_PathAndQuery) (SystemIUriData* self);
	const gchar* (*get_StrongPort) (SystemIUriData* self);
	const gchar* (*get_Query) (SystemIUriData* self);
	const gchar* (*get_UserInfo) (SystemIUriData* self);
};

typedef enum  {
	SYSTEM_URI_IDN_SCOPE_None,
	SYSTEM_URI_IDN_SCOPE_AllExceptIntranet,
	SYSTEM_URI_IDN_SCOPE_All
} SystemUriIdnScope;

typedef enum  {
	SYSTEM_URI_KIND_RelativeOrAbsolute,
	SYSTEM_URI_KIND_Absolute,
	SYSTEM_URI_KIND_Relative
} SystemUriKind;

typedef enum  {
	SYSTEM_URI_PARTIAL_Scheme = 0,
	SYSTEM_URI_PARTIAL_Authority = 1,
	SYSTEM_URI_PARTIAL_Path = 2,
	SYSTEM_URI_PARTIAL_Query
} SystemUriPartial;

typedef enum  {
	SYSTEM_URI_HOST_NAME_TYPE_Unknown = 0,
	SYSTEM_URI_HOST_NAME_TYPE_Basic = 1,
	SYSTEM_URI_HOST_NAME_TYPE_Dns = 2,
	SYSTEM_URI_HOST_NAME_TYPE_IPv4 = 3,
	SYSTEM_URI_HOST_NAME_TYPE_IPv6 = 4
} SystemUriHostNameType;

typedef enum  {
	SYSTEM_URI_FORMAT_UriEscaped = 1,
	SYSTEM_URI_FORMAT_Unescaped,
	SYSTEM_URI_FORMAT_SafeUnescaped
} SystemUriFormat;

typedef enum  {
	SYSTEM_GENERIC_URI_PARSER_OPTIONS_Default = 0,
	SYSTEM_GENERIC_URI_PARSER_OPTIONS_GenericAuthority = 1,
	SYSTEM_GENERIC_URI_PARSER_OPTIONS_AllowEmptyAuthority = 2,
	SYSTEM_GENERIC_URI_PARSER_OPTIONS_NoUserInfo = 4,
	SYSTEM_GENERIC_URI_PARSER_OPTIONS_NoPort = 8,
	SYSTEM_GENERIC_URI_PARSER_OPTIONS_NoQuery = 16,
	SYSTEM_GENERIC_URI_PARSER_OPTIONS_NoFragment = 32,
	SYSTEM_GENERIC_URI_PARSER_OPTIONS_DontConvertPathBackslashes = 64,
	SYSTEM_GENERIC_URI_PARSER_OPTIONS_DontCompressPath = 128,
	SYSTEM_GENERIC_URI_PARSER_OPTIONS_DontUnescapePathDotsAndSlashes = 256,
	SYSTEM_GENERIC_URI_PARSER_OPTIONS_Idn = 512,
	SYSTEM_GENERIC_URI_PARSER_OPTIONS_IriParsing = 1024
} SystemGenericUriParserOptions;

typedef enum  {
	SYSTEM_NET_SECURITY_PROTOCOL_TYPE_Ssl3 = 48,
	SYSTEM_NET_SECURITY_PROTOCOL_TYPE_Tls = 192
} SystemNetSecurityProtocolType;

typedef enum  {
	SYSTEM_NET_DECOMPRESSION_METHODS_None = 0,
	SYSTEM_NET_DECOMPRESSION_METHODS_GZip = 1,
	SYSTEM_NET_DECOMPRESSION_METHODS_Deflate = 2
} SystemNetDecompressionMethods;

struct _SystemNetMimeDispositionTypeNames {
	GTypeInstance parent_instance;
	volatile int ref_count;
	SystemNetMimeDispositionTypeNamesPrivate * priv;
};

struct _SystemNetMimeDispositionTypeNamesClass {
	GTypeClass parent_class;
	void (*finalize) (SystemNetMimeDispositionTypeNames *self);
};

struct _SystemNetMimeApplication {
	gchar* prefix;
	gchar* Octet;
	gchar* Pdf;
	gchar* Rtf;
	gchar* Soap;
	gchar* Zip;
};

struct _SystemNetMimeImage {
	gchar* prefix;
	gchar* Gif;
	gchar* Jpeg;
	gchar* Tiff;
};

struct _SystemNetMimeText {
	gchar* prefix;
	gchar* Html;
	gchar* Plain;
	gchar* RichText;
	gchar* Xml;
};

struct _SystemNetMimeMediaTypeNames {
	SystemNetMimeApplication Application;
	SystemNetMimeImage Image;
	SystemNetMimeText Text;
};

typedef enum  {
	SYSTEM_NET_MIME_TRANSFER_ENCODING_QuotedPrintable = 0,
	SYSTEM_NET_MIME_TRANSFER_ENCODING_Base64 = 1,
	SYSTEM_NET_MIME_TRANSFER_ENCODING_SevenBit = 2,
	SYSTEM_NET_MIME_TRANSFER_ENCODING_Unknown = -1
} SystemNetMimeTransferEncoding;

typedef enum  {
	SYSTEM_NET_MAIL_DELIVERY_NOTIFICATION_OPTIONS_None = 1 << 0,
	SYSTEM_NET_MAIL_DELIVERY_NOTIFICATION_OPTIONS_OnSuccess = 1 << 1,
	SYSTEM_NET_MAIL_DELIVERY_NOTIFICATION_OPTIONS_OnFailure = 1 << 2,
	SYSTEM_NET_MAIL_DELIVERY_NOTIFICATION_OPTIONS_Delay = 4,
	SYSTEM_NET_MAIL_DELIVERY_NOTIFICATION_OPTIONS_Never = 134217728
} SystemNetMailDeliveryNotificationOptions;

struct _SystemNetMailMailAddress {
	GObject parent_instance;
	SystemNetMailMailAddressPrivate * priv;
};

struct _SystemNetMailMailAddressClass {
	GObjectClass parent_class;
};

typedef enum  {
	SYSTEM_NET_MAIL_MAIL_PRIORITY_Normal,
	SYSTEM_NET_MAIL_MAIL_PRIORITY_Low,
	SYSTEM_NET_MAIL_MAIL_PRIORITY_High
} SystemNetMailMailPriority;

typedef enum  {
	SYSTEM_NET_MAIL_SMTP_DELIVERY_METHOD_Network = 0,
	SYSTEM_NET_MAIL_SMTP_DELIVERY_METHOD_SpecifiedPickupDirectory = 1,
	SYSTEM_NET_MAIL_SMTP_DELIVERY_METHOD_PickupDirectoryFromIis = 2
} SystemNetMailSmtpDeliveryMethod;

struct _SystemNetMailMailAddressCollection {
	GeeHashSet parent_instance;
	SystemNetMailMailAddressCollectionPrivate * priv;
};

struct _SystemNetMailMailAddressCollectionClass {
	GeeHashSetClass parent_class;
};

typedef enum  {
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_BadCommandSequence = 503,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_CannotVerifyUserWillAttemptDelivery = 252,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_ClientNotPermitted = 454,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_CommandNotImplemented = 502,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_CommandParameterNotImplemented = 504,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_CommandUnrecognized = 500,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_ExceededStorageAllocation = 552,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_GeneralFailure = -1,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_HelpMessage = 214,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_InsufficientStorage = 452,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_LocalErrorInProcessing = 451,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_MailboxBusy = 450,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_MailboxNameNotAllowed = 553,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_MailboxUnavailable = 550,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_Ok = 250,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_ServiceClosingTransmissionChannel = 221,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_ServiceNotAvailable = 421,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_ServiceReady = 220,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_StartMailInput = 354,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_SyntaxError = 501,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_SystemStatus = 211,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_TransactionFailed = 554,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_UserNotLocalTryAlternatePath = 551,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_UserNotLocalWillForward = 251,
	SYSTEM_NET_MAIL_SMTP_STATUS_CODE_MustIssueStartTlsFirst = 530
} SystemNetMailSmtpStatusCode;

typedef enum  {
	SYSTEM_NET_MAIL_SMTP_ACCESS_None,
	SYSTEM_NET_MAIL_SMTP_ACCESS_Connect,
	SYSTEM_NET_MAIL_SMTP_ACCESS_ConnectToUnrestrictedPort
} SystemNetMailSmtpAccess;


GType system_code_dom_code_region_mode_get_type (void) G_GNUC_CONST;
GType system_code_dom_field_direction_get_type (void) G_GNUC_CONST;
GType system_code_dom_code_type_reference_options_get_type (void) G_GNUC_CONST;
GType system_code_dom_code_binary_operator_type_get_type (void) G_GNUC_CONST;
GType system_code_dom_member_attributes_get_type (void) G_GNUC_CONST;
GType system_io_ports_handshake_get_type (void) G_GNUC_CONST;
GType system_io_ports_stop_bits_get_type (void) G_GNUC_CONST;
GType system_io_ports_parity_get_type (void) G_GNUC_CONST;
GType system_io_ports_serial_data_get_type (void) G_GNUC_CONST;
GType system_iuri_data_get_type (void) G_GNUC_CONST;
const gchar* system_iuri_data_get_AbsolutePath (SystemIUriData* self);
const gchar* system_iuri_data_get_AbsoluteUri (SystemIUriData* self);
const gchar* system_iuri_data_get_AbsoluteUri_SafeUnescaped (SystemIUriData* self);
const gchar* system_iuri_data_get_Authority (SystemIUriData* self);
const gchar* system_iuri_data_get_Fragment (SystemIUriData* self);
const gchar* system_iuri_data_get_Host (SystemIUriData* self);
const gchar* system_iuri_data_get_PathAndQuery (SystemIUriData* self);
const gchar* system_iuri_data_get_StrongPort (SystemIUriData* self);
const gchar* system_iuri_data_get_Query (SystemIUriData* self);
const gchar* system_iuri_data_get_UserInfo (SystemIUriData* self);
GType system_uri_idn_scope_get_type (void) G_GNUC_CONST;
GType system_uri_kind_get_type (void) G_GNUC_CONST;
GType system_uri_partial_get_type (void) G_GNUC_CONST;
GType system_uri_host_name_type_get_type (void) G_GNUC_CONST;
GType system_uri_format_get_type (void) G_GNUC_CONST;
GType system_generic_uri_parser_options_get_type (void) G_GNUC_CONST;
GType system_net_security_protocol_type_get_type (void) G_GNUC_CONST;
GType system_net_decompression_methods_get_type (void) G_GNUC_CONST;
gpointer system_net_mime_disposition_type_names_ref (gpointer instance);
void system_net_mime_disposition_type_names_unref (gpointer instance);
GParamSpec* system_net_mime_param_spec_disposition_type_names (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void system_net_mime_value_set_disposition_type_names (GValue* value, gpointer v_object);
void system_net_mime_value_take_disposition_type_names (GValue* value, gpointer v_object);
gpointer system_net_mime_value_get_disposition_type_names (const GValue* value);
GType system_net_mime_disposition_type_names_get_type (void) G_GNUC_CONST;
#define SYSTEM_NET_MIME_DISPOSITION_TYPE_NAMES_Attachment "attachment"
#define SYSTEM_NET_MIME_DISPOSITION_TYPE_NAMES_Inline "inline"
SystemNetMimeDispositionTypeNames* system_net_mime_disposition_type_names_new (void);
SystemNetMimeDispositionTypeNames* system_net_mime_disposition_type_names_construct (GType object_type);
GType system_net_mime_media_type_names_get_type (void) G_GNUC_CONST;
GType system_net_mime_application_get_type (void) G_GNUC_CONST;
SystemNetMimeApplication* system_net_mime_application_dup (const SystemNetMimeApplication* self);
void system_net_mime_application_free (SystemNetMimeApplication* self);
void system_net_mime_application_copy (const SystemNetMimeApplication* self, SystemNetMimeApplication* dest);
void system_net_mime_application_destroy (SystemNetMimeApplication* self);
GType system_net_mime_image_get_type (void) G_GNUC_CONST;
SystemNetMimeImage* system_net_mime_image_dup (const SystemNetMimeImage* self);
void system_net_mime_image_free (SystemNetMimeImage* self);
void system_net_mime_image_copy (const SystemNetMimeImage* self, SystemNetMimeImage* dest);
void system_net_mime_image_destroy (SystemNetMimeImage* self);
GType system_net_mime_text_get_type (void) G_GNUC_CONST;
SystemNetMimeText* system_net_mime_text_dup (const SystemNetMimeText* self);
void system_net_mime_text_free (SystemNetMimeText* self);
void system_net_mime_text_copy (const SystemNetMimeText* self, SystemNetMimeText* dest);
void system_net_mime_text_destroy (SystemNetMimeText* self);
SystemNetMimeMediaTypeNames* system_net_mime_media_type_names_dup (const SystemNetMimeMediaTypeNames* self);
void system_net_mime_media_type_names_free (SystemNetMimeMediaTypeNames* self);
void system_net_mime_media_type_names_copy (const SystemNetMimeMediaTypeNames* self, SystemNetMimeMediaTypeNames* dest);
void system_net_mime_media_type_names_destroy (SystemNetMimeMediaTypeNames* self);
void system_net_mime_application_init (SystemNetMimeApplication *self);
void system_net_mime_image_init (SystemNetMimeImage *self);
void system_net_mime_text_init (SystemNetMimeText *self);
GType system_net_mime_transfer_encoding_get_type (void) G_GNUC_CONST;
GType system_net_mail_delivery_notification_options_get_type (void) G_GNUC_CONST;
GType system_net_mail_mail_address_get_type (void) G_GNUC_CONST;
SystemNetMailMailAddress* system_net_mail_mail_address_new (const gchar* address, const gchar* displayName);
SystemNetMailMailAddress* system_net_mail_mail_address_construct (GType object_type, const gchar* address, const gchar* displayName);
gint system_net_mail_mail_address_GetHashCode (SystemNetMailMailAddress* self);
gchar* system_net_mail_mail_address_ToString (SystemNetMailMailAddress* self);
const gchar* system_net_mail_mail_address_get_Address (SystemNetMailMailAddress* self);
const gchar* system_net_mail_mail_address_get_DisplayName (SystemNetMailMailAddress* self);
const gchar* system_net_mail_mail_address_get_Host (SystemNetMailMailAddress* self);
const gchar* system_net_mail_mail_address_get_User (SystemNetMailMailAddress* self);
GType system_net_mail_mail_priority_get_type (void) G_GNUC_CONST;
GType system_net_mail_smtp_delivery_method_get_type (void) G_GNUC_CONST;
GType system_net_mail_mail_address_collection_get_type (void) G_GNUC_CONST;
void system_net_mail_mail_address_collection_Add (SystemNetMailMailAddressCollection* self, const gchar* addresses);
void system_net_mail_mail_address_collection_InsertItem (SystemNetMailMailAddressCollection* self, gint index, SystemNetMailMailAddress* item);
void system_net_mail_mail_address_collection_SetItem (SystemNetMailMailAddressCollection* self, gint index, SystemNetMailMailAddress* item);
gchar* system_net_mail_mail_address_collection_ToString (SystemNetMailMailAddressCollection* self);
SystemNetMailMailAddressCollection* system_net_mail_mail_address_collection_new (void);
SystemNetMailMailAddressCollection* system_net_mail_mail_address_collection_construct (GType object_type);
GType system_net_mail_smtp_status_code_get_type (void) G_GNUC_CONST;
GType system_net_mail_smtp_access_get_type (void) G_GNUC_CONST;


G_END_DECLS

#endif
