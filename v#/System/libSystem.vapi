/* libSystem.vapi generated by valac 0.26.1, do not modify. */

namespace System {
	namespace CodeDom {
		[CCode (cheader_filename = "libSystem.h")]
		[Serializable]
		public enum CodeBinaryOperatorType {
			Add,
			Subtract,
			Multiply,
			Divide,
			Modulus,
			Assign,
			IdentityInequality,
			IdentityEquality,
			ValueEquality,
			BitwiseOr,
			BitwiseAnd,
			BooleanOr,
			BooleanAnd,
			LessThan,
			LessThanOrEqual,
			GreaterThan,
			GreaterThanOrEqual
		}
		[CCode (cheader_filename = "libSystem.h")]
		[Serializable]
		public enum CodeRegionMode {
			None,
			Start,
			End
		}
		[CCode (cheader_filename = "libSystem.h")]
		[Flags]
		[Serializable]
		public enum CodeTypeReferenceOptions {
			GlobalReference,
			GenericTypeParameter
		}
		[CCode (cheader_filename = "libSystem.h")]
		[Serializable]
		public enum FieldDirection {
			In,
			Out,
			Ref
		}
		[CCode (cheader_filename = "libSystem.h")]
		[Serializable]
		public enum MemberAttributes {
			Abstract,
			Final,
			Static,
			Override,
			Const,
			ScopeMask,
			New,
			VTableMask,
			Overloaded,
			Assembly,
			FamilyAndAssembly,
			Family,
			FamilyOrAssembly,
			Private,
			Public,
			AccessMask
		}
	}
	namespace IO {
		namespace Ports {
			[CCode (cheader_filename = "libSystem.h")]
			public enum Handshake {
				None,
				XOnXOff,
				RequestToSend,
				RequestToSendXOnXOff
			}
			[CCode (cheader_filename = "libSystem.h")]
			public enum Parity {
				None,
				Odd,
				Even,
				Mark,
				Space
			}
			[CCode (cheader_filename = "libSystem.h")]
			public enum SerialData {
				Chars,
				Eof
			}
			[CCode (cheader_filename = "libSystem.h")]
			public enum StopBits {
				None,
				One,
				Two,
				OnePointFive
			}
		}
	}
	namespace Net {
		namespace Mail {
			[CCode (cheader_filename = "libSystem.h")]
			public class MailAddress : GLib.Object {
				public MailAddress (string address, string? displayName = null);
				public int GetHashCode ();
				public string ToString ();
				public string Address { get; }
				public string DisplayName { get; }
				public string Host { get; }
				public string User { get; }
			}
			[CCode (cheader_filename = "libSystem.h")]
			public class MailAddressCollection : Gee.HashSet<System.Net.Mail.MailAddress> {
				public MailAddressCollection ();
				public void Add (string addresses);
				protected void InsertItem (int index, System.Net.Mail.MailAddress item);
				protected void SetItem (int index, System.Net.Mail.MailAddress item);
				public string ToString ();
			}
			[CCode (cheader_filename = "libSystem.h")]
			[Flags]
			public enum DeliveryNotificationOptions {
				None,
				OnSuccess,
				OnFailure,
				Delay,
				Never
			}
			[CCode (cheader_filename = "libSystem.h")]
			public enum MailPriority {
				Normal,
				Low,
				High
			}
			[CCode (cheader_filename = "libSystem.h")]
			public enum SmtpAccess {
				None,
				Connect,
				ConnectToUnrestrictedPort
			}
			[CCode (cheader_filename = "libSystem.h")]
			public enum SmtpDeliveryMethod {
				Network,
				SpecifiedPickupDirectory,
				PickupDirectoryFromIis
			}
			[CCode (cheader_filename = "libSystem.h")]
			public enum SmtpStatusCode {
				BadCommandSequence,
				CannotVerifyUserWillAttemptDelivery,
				ClientNotPermitted,
				CommandNotImplemented,
				CommandParameterNotImplemented,
				CommandUnrecognized,
				ExceededStorageAllocation,
				GeneralFailure,
				HelpMessage,
				InsufficientStorage,
				LocalErrorInProcessing,
				MailboxBusy,
				MailboxNameNotAllowed,
				MailboxUnavailable,
				Ok,
				ServiceClosingTransmissionChannel,
				ServiceNotAvailable,
				ServiceReady,
				StartMailInput,
				SyntaxError,
				SystemStatus,
				TransactionFailed,
				UserNotLocalTryAlternatePath,
				UserNotLocalWillForward,
				MustIssueStartTlsFirst
			}
		}
		namespace Mime {
			[CCode (cheader_filename = "libSystem.h")]
			public class DispositionTypeNames {
				public const string Attachment;
				public const string Inline;
				public DispositionTypeNames ();
			}
			[CCode (cheader_filename = "libSystem.h")]
			public struct Application {
				public string prefix;
				public string Octet;
				public string Pdf;
				public string Rtf;
				public string Soap;
				public string Zip;
				public Application ();
			}
			[CCode (cheader_filename = "libSystem.h")]
			public struct Image {
				public string prefix;
				public string Gif;
				public string Jpeg;
				public string Tiff;
				public Image ();
			}
			[CCode (cheader_filename = "libSystem.h")]
			public struct MediaTypeNames {
				public System.Net.Mime.Application Application;
				public System.Net.Mime.Image Image;
				public System.Net.Mime.Text Text;
			}
			[CCode (cheader_filename = "libSystem.h")]
			public struct Text {
				public string prefix;
				public string Html;
				public string Plain;
				public string RichText;
				public string Xml;
				public Text ();
			}
			[CCode (cheader_filename = "libSystem.h")]
			public enum TransferEncoding {
				QuotedPrintable,
				Base64,
				SevenBit,
				Unknown
			}
		}
		[CCode (cheader_filename = "libSystem.h")]
		[Flags]
		public enum DecompressionMethods {
			None,
			GZip,
			Deflate
		}
		[CCode (cheader_filename = "libSystem.h")]
		[Flags]
		public enum SecurityProtocolType {
			Ssl3,
			Tls
		}
	}
	[CCode (cheader_filename = "libSystem.h")]
	public interface IUriData : GLib.Object {
		public abstract string AbsolutePath { get; }
		public abstract string AbsoluteUri { get; }
		public abstract string AbsoluteUri_SafeUnescaped { get; }
		public abstract string Authority { get; }
		public abstract string Fragment { get; }
		public abstract string Host { get; }
		public abstract string PathAndQuery { get; }
		public abstract string Query { get; }
		public abstract string StrongPort { get; }
		public abstract string UserInfo { get; }
	}
	[CCode (cheader_filename = "libSystem.h")]
	[Flags]
	public enum GenericUriParserOptions {
		Default,
		GenericAuthority,
		AllowEmptyAuthority,
		NoUserInfo,
		NoPort,
		NoQuery,
		NoFragment,
		DontConvertPathBackslashes,
		DontCompressPath,
		DontUnescapePathDotsAndSlashes,
		Idn,
		IriParsing
	}
	[CCode (cheader_filename = "libSystem.h")]
	public enum UriFormat {
		UriEscaped,
		Unescaped,
		SafeUnescaped
	}
	[CCode (cheader_filename = "libSystem.h")]
	public enum UriHostNameType {
		Unknown,
		Basic,
		Dns,
		IPv4,
		IPv6
	}
	[CCode (cheader_filename = "libSystem.h")]
	public enum UriIdnScope {
		None,
		AllExceptIntranet,
		All
	}
	[CCode (cheader_filename = "libSystem.h")]
	public enum UriKind {
		RelativeOrAbsolute,
		Absolute,
		Relative
	}
	[CCode (cheader_filename = "libSystem.h")]
	public enum UriPartial {
		Scheme,
		Authority,
		Path,
		Query
	}
}
